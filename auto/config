#!/bin/sh

set -xe

# we require building from git
if ! git rev-parse --is-inside-work-tree; then
    echo "${PWD} is not a Git tree. Exiting."
    exit 1
fi

. config/digabi
if [ -e config/digabi.local ] ; then
   . config/digabi.local
fi

# Run pre-config hooks
PRE_CONFIG_HOOKS="$(ls ${PWD}/config/hooks/*.pre-config)"

if [ -n "${PRE_CONFIG_HOOKS}" ]
then
    echo "I: Executing pre-build hooks..."
fi

for hook in ${PRE_CONFIG_HOOKS}
do
    hook_base="$(basename ${hook})"
    if [ -x "${hook}" ]
    then
        echo "I: Executing hook ${hook_base}..."
        ${hook}
    else
        echo "W: Non-executable hook ${hook_base}."
    fi
done

if [ -n "${ARCH}" ]
then
    ARCHITECTURE="${ARCH}"
else
    ARCHITECTURE="i386"
fi

_SOURCE="false"

ARCHIVE_AREAS="main contrib non-free"
DISTRIBUTION="jessie"

DEFAULT_DEBIAN_MIRROR="http://ftp.fi.debian.org/debian/"
if [ -z "${DEBIAN_MIRROR}" ] ; then
    DEBIAN_MIRROR="${DEFAULT_DEBIAN_MIRROR}"
fi

BOOTAPPEND_LIVE="boot=live config quiet splash security=apparmor"
ISO_PUBLISHER="Ylioppilastutkintolautakunta ; https://digabi.fi ; digabi@ylioppilastutkinto.fi"
ISO_VOLUME="${DIGABI_DIST_NAME_SHORT}-$(./scripts/version.helper notime nobuild shortver |cut -b-27)"

HDD_LABEL="${DIGABI_DIST_NAME}"
HDD_SIZE="1024" # MB
BINARY_IMAGE="hdd"
BINARY_FILESYSTEM="fat32"

#if [ -z "${APT_PROXY}" ]
#then
#    APT_PROXY="http://localhost:3142/"
#fi

lb config noauto \
    --clean \
    --ignore-system-defaults \
    --architecture "${ARCHITECTURE}" \
    --archive-areas "${ARCHIVE_AREAS}" \
    --distribution "${DISTRIBUTION}" \
    --linux-packages "linux-image" \
    --apt-indices "false" \
    --apt-recommends "false" \
    --bootappend-live "${BOOTAPPEND_LIVE}" \
    --iso-volume "${ISO_VOLUME}" \
    --iso-publisher "${ISO_PUBLISHER}" \
    --memtest "none" \
    --source "${_SOURCE}" \
    --apt-source-archives "${_SOURCE}" \
    --parent-mirror-bootstrap "${DEBIAN_MIRROR}" \
    --parent-mirror-binary "${DEBIAN_MIRROR}" \
    --mirror-bootstrap "${DEBIAN_MIRROR}" \
    --mirror-chroot "${DEBIAN_MIRROR}" \
    --mirror-binary "${DEFAULT_DEBIAN_MIRROR}" \
    --security "true" \
    --win32-loader "false" \
    --binary-image "${BINARY_IMAGE" \
    --binary-filesystem "${BINARY_FILESYSTEM} \
    --hdd-label "${HDD_LABEL} \
    --hdd-size "${HDD_SIZE}" \
	"${@}"

echo "LB_ARCHITECTURE=${ARCHITECTURE}" >>config/bootstrap

#
# If we are building from snapshot.debian.org, ignore Valid-Until header in Release files
#
contains() {
    string="$1"
    substring="$2"
    if test "${string#*$substring}" != "$string"
    then
        return 0
    else
        return 1
    fi
}

if contains "${DEBIAN_MIRROR}" "snapshot.debian.org"
then
    echo "I: Using Debian snapshots, ignore APT Check-Valid-Until..."
    STAGES="bootstrap chroot binary"
    for stage in ${STAGES}
    do
        mkdir -p config/includes.${stage}/etc/apt/apt.conf.d
        cat << EOF >config/includes.${stage}/etc/apt/apt.conf.d/99-snapshots
Acquire::Check-Valid-Until "false";
EOF
    done
fi

#!/bin/sh

set -e

contains() {
    string="$1"
    substring="$2"
    if test "${string#*$substring}" != "$string"
    then
        return 0
    else
        return 1
    fi
}

# we require building from git
if ! git rev-parse --is-inside-work-tree; then
    echo "${PWD} is not a Git tree. Exiting."
    exit 1
fi

if [ -r target/default/digabi.local ]
then
    . target/default/digabi.local
fi
if [ -z "${DIGABI_BUILD_TARGET}" ]
then
    DIGABI_BUILD_TARGET="default"
fi

if ! contains "${DIGABI_BUILD_TARGET}" default
then
    DIGABI_BUILD_TARGET="default ${DIGABI_BUILD_TARGET}"
fi

CONFIG_DIR="./config"
mkdir -p "${CONFIG_DIR}"

for target in ${DIGABI_BUILD_TARGET}
do
    SOURCE_DIR="./target/${target}"
    if [ -d "${SOURCE_DIR}" ]
    then
        echo "I: Adding ${SOURCE_DIR} configuration..."
        rsync --exclude=*~ -cav "${SOURCE_DIR}/" "${CONFIG_DIR}/"
    else
        echo "E: Missing build target configuration: ${target}."
        exit 1
    fi
done

echo "I: Combine config/digabi configurations..."
# Remove current config/digabi
rm -f ${CONFIG_DIR}/digabi
for target in ${DIGABI_BUILD_TARGET}
do
    SOURCE_FILE="./target/${target}/digabi"
    if [ -f "${SOURCE_FILE}" ]
    then
        cat "${SOURCE_FILE}" >>${CONFIG_DIR}/digabi
    fi
done

# Monkey-patch, add our custom variables to chroot environment
if [ -r "${CONFIG_DIR}/digabi.local" ]
then
    grep -v '^#' ${CONFIG_DIR}/digabi.local |sed 's, ,+,g' |xargs > ${CONFIG_DIR}/environment.chroot
fi

set -a
. config/digabi
if [ -e config/digabi.local ] ; then
   . config/digabi.local
fi
set +a

# Run pre-config hooks
PRE_CONFIG_HOOKS="$(ls ${PWD}/config/hooks/*.pre-config)"

if [ -n "${PRE_CONFIG_HOOKS}" ]
then
    echo "I: Executing pre-config hooks..."
fi

for hook in ${PRE_CONFIG_HOOKS}
do
    hook_base="$(basename ${hook})"
    if [ -x "${hook}" ]
    then
        echo "I: Executing hook ${hook_base}..."
        ${hook}
    else
        echo "W: Non-executable hook ${hook_base}."
    fi
done

# Check if ARCH variable has been defined, if not, use build system architecture as default
if [ -z "${ARCH}" ]
then
    ARCH="$(dpkg --print-architecture)"
fi

_SOURCE="false"
ARCHIVE_AREAS="main contrib non-free"

if [ -z "${DISTRIBUTION}" ]
then
    DISTRIBUTION="jessie"
fi

DEFAULT_DEBIAN_MIRROR="http://httpredir.debian.org/debian"
if [ -z "${DEBIAN_MIRROR}" ] ; then
    DEBIAN_MIRROR="${DEFAULT_DEBIAN_MIRROR}"
fi

BOOTAPPEND_LIVE="boot=live config security=apparmor ${DIGABI_APPEND}"
ISO_PUBLISHER="Ylioppilastutkintolautakunta ; https://digabi.fi ; digabi@ylioppilastutkinto.fi"
ISO_VOLUME="${DIGABI_DIST_NAME_SHORT}-${DIGABI_FULL_VERSION}"

if [ -z "${IMAGE_NAME}" ]
then
    IMAGE_NAME="${DIGABI_DIST_NAME_SHORT}"
fi    

HDD_LABEL="${DIGABI_DIST_NAME}"
BINARY_FILESYSTEM="fat32"
if [ -z "${BINARY_IMAGES}" ]
then
    BINARY_IMAGES="iso-hybrid"
fi

DEBOOTSTRAP_OPTIONS="--keyring=custom-packages/digabi-repository/digabi.gpg ${DEBOOTSTRAP_OPTIONS}"

#if [ -z "${APT_PROXY}" ]
#then
#    APT_PROXY="http://localhost:3142/"
#fi

lb config noauto \
    --apt-indices "false" \
    --apt-recommends "false" \
    --apt-source-archives "${_SOURCE}" \
    --architecture "${ARCH}" \
    --archive-areas "${ARCHIVE_AREAS}" \
    --binary-filesystem "${BINARY_FILESYSTEM}" \
    --binary-images "${BINARY_IMAGES}" \
    --bootappend-live "${BOOTAPPEND_LIVE}" \
    --debootstrap-options "${DEBOOTSTRAP_OPTIONS}" \
    --checksums "sha512" \
    --clean \
    --distribution "${DISTRIBUTION}" \
    --hdd-label "${HDD_LABEL}" \
    --hdd-size "auto" \
    --ignore-system-defaults \
    --image-name "${IMAGE_NAME}" \
    --iso-publisher "${ISO_PUBLISHER}" \
    --iso-volume "${ISO_VOLUME}" \
    --linux-packages "linux-image-3.16.0.4.ytl linux-headers-3.16.0.4.ytl" \
    --memtest "none" \
    --mirror-binary "${DEFAULT_DEBIAN_MIRROR}" \
    --mirror-bootstrap "${DEBIAN_MIRROR}" \
    --mirror-chroot "${DEBIAN_MIRROR}" \
    --parent-mirror-binary "${DEBIAN_MIRROR}" \
    --parent-mirror-bootstrap "${DEBIAN_MIRROR}" \
    --security "true" \
    --source "${_SOURCE}" \
    --win32-loader "false" \
	"${@}"

echo "LB_ARCHITECTURE=${ARCH}" >>config/bootstrap
echo "LB_BINARY_IMAGES=${BINARY_IMAGES}" >>config/binary
echo "LB_IMAGE_NAME=${IMAGE_NAME}" >>config/binary

#
# If we are building from snapshot.debian.org, ignore Valid-Until header in Release files
#

if contains "${DEBIAN_MIRROR}" "snapshot.debian.org"
then
    echo "I: Using Debian snapshots, ignore APT Check-Valid-Until..."
    STAGES="bootstrap chroot binary"
    for stage in ${STAGES}
    do
        mkdir -p config/includes.${stage}/etc/apt/apt.conf.d
        cat << EOF >config/includes.${stage}/etc/apt/apt.conf.d/99-snapshots
Acquire::Check-Valid-Until "false";
EOF
    done
fi

#!/bin/bash

set -ex

umask 022

# we require building from git
if ! git rev-parse --is-inside-work-tree; then
    echo "${PWD} is not a Git tree. Exiting."
    exit 1
fi

set -a
. config/digabi
if [ -e config/digabi.local ] ; then
   . config/digabi.local
fi
set +a

# get LB_BINARY_IMAGES
. config/binary

# get LB_ARCHITECTURE and LB_DISTRIBUTION
. config/bootstrap

# Run pre-build hooks
PRE_BUILD_HOOKS="$(ls ${PWD}/config/hooks/*.pre-build)"

if [ -n "${PRE_BUILD_HOOKS}" ]
then
    echo "I: Executing pre-build hooks..."
fi

for hook in ${PRE_BUILD_HOOKS}
do
    hook_base="$(basename ${hook})"
    if [ -x "${hook}" ]
    then
        echo "I: Executing hook ${hook_base}..."
        ${hook}
    else
        echo "W: Non-executable hook ${hook_base}."
    fi
done

# get git branch or tag so we can set the basename appropriately, i.e.:
# * if we build from a tag:    ${DIGABI_DIST_NAME}-$ARCH-$TAG.iso
# * if we build from a branch: ${DIGABI_DIST_NAME}-$ARCH-$BRANCH-$VERSION-$DATE.iso
# * if Jenkins builds from a branch: ${DIGABI_DIST_NAME}-$ARCH-$BRANCH-$VERSION-$TIME-$COMMIT.iso
# * else: ${DIGABI_DIST_NAME}-$ARCH-$VERSION-$TIME-$COMMIT
if GIT_REF="$(git symbolic-ref HEAD)"; then
    GIT_BRANCH="${GIT_REF#refs/heads/}"
    CLEAN_GIT_BRANCH=$(echo "$GIT_BRANCH" | sed 's,/,_,g')
    if [ -n "${JENKINS_URL}" ]; then
        GIT_SHORT_ID="$(git rev-parse --short HEAD)"
        BUILD_BASENAME="${DIGABI_DIST_NAME}-${LB_ARCHITECTURE}-${CLEAN_GIT_BRANCH}-${DIGABI_VERSION}-${DIGABI_NOW}-${GIT_SHORT_ID}"
    else
        BUILD_BASENAME="${DIGABI_DIST_NAME}-${LB_ARCHITECTURE}-${CLEAN_GIT_BRANCH}-${DIGABI_VERSION}-${DIGABI_TODAY}"
    fi
else
    GIT_CURRENT_COMMIT="$(git rev-parse HEAD)"
    if GIT_TAG="$(git describe --tags --exact-match ${GIT_CURRENT_COMMIT})"; then
        CLEAN_GIT_TAG=$(echo "$GIT_TAG" | sed -e 's,/,_,g' -e 's,-rc,~rc,')
        BUILD_BASENAME="${DIGABI_DIST_NAME}-${LB_ARCHITECTURE}-${CLEAN_GIT_TAG}"
    else
        GIT_SHORT_ID="$(git rev-parse --short HEAD)"
        BUILD_BASENAME="${DIGABI_DIST_NAME}-${LB_ARCHITECTURE}-${DIGABI_VERSION}-${DIGABI_NOW}-${GIT_SHORT_ID}"
    fi
fi

BUILD_FILENAME="${LB_IMAGE_NAME}-${LB_ARCHITECTURE}"
case "${LB_BINARY_IMAGES}" in
    iso)
        BUILD_FILENAME_EXT="iso"
        BUILD_FILENAME_FULL="${BUILD_FILENAME}.${BUILD_FILENAME_EXT}"
    ;;
    iso-hybrid)
        BUILD_FILENAME_EXT="hybrid.iso"
        BUILD_FILENAME_FULL="${BUILD_FILENAME}.${BUILD_FILENAME_EXT}"
    ;;
    hdd)
        BUILD_FILENAME_EXT="img"
        BUILD_FILENAME_FULL="${BUILD_FILENAME}"
    ;;
    *)
        echo "E: Unsupported image format: ${LB_BINARY_IMAGES}."
        exit 1
    ;;
esac

BUILD_DEST_FILENAME="${BUILD_BASENAME}.${BUILD_FILENAME_EXT}"
BUILD_MANIFEST="${BUILD_DEST_FILENAME}.list"
BUILD_PACKAGES="${BUILD_DEST_FILENAME}.packages"
BUILD_LOG="${BUILD_DEST_FILENAME}.buildlog"
BUILD_CONFIG="${BUILD_DEST_FILENAME}.config.tar.xz"

echo "Building ${LB_BINARY_IMAGES} image ${BUILD_BASENAME}..."
set -o pipefail
if time lb build noauto ${@} 2>&1 | tee "${BUILD_LOG}" ; then
    echo "Image was successfully created"
    echo "Renaming generated files..."
    ls
    #mv -i "${BUILD_FILENAME}.${BUILD_FILENAME_EXT}" "${BUILD_DEST_FILENAME}" # FIXME
    mv -i "${BUILD_FILENAME_FULL}" "${BUILD_DEST_FILENAME}" # FIXME
    mv -i "${BUILD_FILENAME}.packages" "${BUILD_PACKAGES}" # FIXME
    tar -cJf "${BUILD_CONFIG}" config
else
    echo "lb build failed ($?)."
    exit 1
fi

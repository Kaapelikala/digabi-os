#!/bin/bash

set -e

umask 022

# we require building from git
if ! git rev-parse --is-inside-work-tree; then
    echo "${PWD} is not a Git tree. Exiting."
    exit 1
fi

. config/digabi
if [ -e config/digabi.local ] ; then
   . config/digabi.local
fi

# get LB_BINARY_IMAGES
. config/binary

# get LB_ARCHITECTURE and LB_DISTRIBUTION
. config/bootstrap

if [ -z "${LB_ARCHITECTURE}" ]
then
    LB_ARCHITECTURE="i386"
fi

# get git branch or tag so we can set the basename appropriately, i.e.:
# * if we build from a tag:    ${DIGABI_DIST_NAME}-$ARCH-$TAG.iso
# * if we build from a branch: ${DIGABI_DIST_NAME}-$ARCH-$BRANCH-$VERSION-$DATE.iso
# * if Jenkins builds from a branch: ${DIGABI_DIST_NAME}-$ARCH-$BRANCH-$VERSION-$TIME-$COMMIT.iso
# * else: ${DIGABI_DIST_NAME}-$ARCH-$VERSION-$TIME-$COMMIT
if GIT_REF="$(git symbolic-ref HEAD)"; then
    GIT_BRANCH="${GIT_REF#refs/heads/}"
    CLEAN_GIT_BRANCH=$(echo "$GIT_BRANCH" | sed 's,/,_,g')
    if [ -n "${JENKINS_URL}" ]; then
        GIT_SHORT_ID="$(git rev-parse --short HEAD)"
        BUILD_BASENAME="${DIGABI_DIST_NAME}-${LB_ARCHITECTURE}-${CLEAN_GIT_BRANCH}-${DIGABI_VERSION}-${DIGABI_NOW}-${GIT_SHORT_ID}"
    else
        BUILD_BASENAME="${DIGABI_DIST_NAME}-${LB_ARCHITECTURE}-${CLEAN_GIT_BRANCH}-${DIGABI_VERSION}-${DIGABI_TODAY}"
    fi
else
    GIT_CURRENT_COMMIT="$(git rev-parse HEAD)"
    if GIT_TAG="$(git describe --tags --exact-match ${GIT_CURRENT_COMMIT})"; then
        CLEAN_GIT_TAG=$(echo "$GIT_TAG" | sed -e 's,/,_,g' -e 's,-rc,~rc,')
    BUILD_BASENAME="${DIGABI_DIST_NAME}-${LB_ARCHITECTURE}-${CLEAN_GIT_TAG}"
    else
        GIT_SHORT_ID="$(git rev-parse --short HEAD)"
        BUILD_BASENAME="${DIGABI_DIST_NAME}-${LB_ARCHITECTURE}-${DIGABI_VERSION}-${DIGABI_NOW}-${GIT_SHORT_ID}"
    fi
fi

# case "${LB_BINARY_IMAGES}" in
#    iso)
#       BUILD_FILENAME_EXT=iso
#       BUILD_FILENAME=live-image # FIXME
#       ;;
#    iso-hybrid)
#       BUILD_FILENAME_EXT=iso
#       BUILD_FILENAME=live-image-${LB_ARCHITECTURE}.hybrid
#       ;;
#    tar)
#       BUILD_FILENAME_EXT=tar.gz
#       BUILD_FILENAME=live-image-tar # FIXME
#       ;;
#    usb-hdd)
#       BUILD_FILENAME_EXT=img
#       BUILD_FILENAME=live-image # FIXME
#       ;;
#    *)
#       echo "Image type ${LB_BINARY_IMAGES} is not supported."
#       exit 1
#       ;;
# esac
BUILD_FILENAME_EXT="hybrid.iso"
BUILD_FILENAME="live-image-${LB_ARCHITECTURE}"

BUILD_DEST_FILENAME="${BUILD_BASENAME}.${BUILD_FILENAME_EXT}"
BUILD_MANIFEST="${BUILD_DEST_FILENAME}.list"
BUILD_PACKAGES="${BUILD_DEST_FILENAME}.packages"
BUILD_LOG="${BUILD_DEST_FILENAME}.buildlog"

echo "Building ${LB_BINARY_IMAGES} image ${BUILD_BASENAME}..."
set -o pipefail
if time lb build noauto ${@} 2>&1 | tee "${BUILD_LOG}" ; then
   echo "Image was successfully created"
   echo "Renaming generated files..."
   mv -i "${BUILD_FILENAME}.${BUILD_FILENAME_EXT}" "${BUILD_DEST_FILENAME}" # FIXME
   #mkdir -p dist
   #mv *.iso dist/
   mv -i "${BUILD_FILENAME}.packages" "${BUILD_PACKAGES}" # FIXME
else
   echo "lb build failed ($?)."
   exit 1
fi

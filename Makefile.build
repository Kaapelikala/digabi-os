#
# Makefile for digabi-os
#
# (c) 2013, 2014 Ylioppilastutkintolautakunta / The Matriculation Examination Board of Finland
# <https://www.ylioppilastutkinto.fi/>
# <https://digabi.fi/>
#
# Author: Ville Korhonen <ville.korhonen@ylioppilastutkinto.fi>
#

#
# User-configurable variables
#
ARCH ?= i386
BINARY_IMAGES ?= iso-hybrid
BUILD_TAG ?= N/A
BUILD_NUMBER ?= unknown.$(shell date +%Y%m%d%H%M%S)
COMMIT ?= HEAD
DEBIAN_MIRROR ?= http://http.debian.net/debian
DIGABI_BUILD_CPUS ?= 1
DIGABI_BUILD_MEM ?= 1024
DIGABI_BUILD_TARGET ?= default
DIGABI_DEBUG ?= false
DIGABI_RAM_BUILD ?= 0
HTTP_PROXY ?= 
REPOSITORY_SUITE ?= sid
ROOT_PASSWORD ?=
VAGRANT_DEFAULT_PROVIDER ?= virtualbox

#
# Other configuration
#

ROOT_CMD = sudo
BUILD_DIR = digabi-os.$(BUILD_NUMBER)
REPOSITORY = custom-packages/digabi-repository

GIT_REPOSITORY = /digabi-os.git

ARTIFACTS_DIR = dist
CONFIG_FILE = digabi.local

BUILD_CONFIG = $(BUILD_DIR)/target/default/$(CONFIG_FILE)

VM_ENVIRONMENT ?= set -ex
VAGRANT  = vagrant

STAGE = .stage

#
# Targets
#
.DEFAULT_GOAL = dist


$(STAGE)/environment:
	mkdir -p $(ARTIFACTS_DIR)
	vagrant up --provider=$(VAGRANT_DEFAULT_PROVIDER) --provision
	mkdir -p $(STAGE)
	touch $(STAGE)/environment

# Clean build environment
clean: $(STAGE)/environment
	$(VAGRANT) ssh -c 'if [ -d "$(BUILD_DIR)" ] ; then sudo rm -rf "$(BUILD_DIR)" ; fi'
	mkdir -p $(STAGE)
	rm -f $(STAGE)/build* $(STAGE)/config
	touch $(STAGE)/clean

# Remove builder (destroys virtual machine)
purge:
	$(VAGRANT) destroy -f
	rm -rf $(STAGE)

# Configure build environment
$(STAGE)/config:	clean $(STAGE)/environment
	$(eval TMP := $(shell mktemp $(CONFIG_FILE).XXXXXX))

	# Export variables to config/digabi.local (which is read by auto/config, auto/build)
	echo 'ARCH="$(ARCH)"' >>$(TMP)
	echo 'BINARY_IMAGES="$(BINARY_IMAGES)"' >>$(TMP)
	echo 'BUILD_NUMBER="$(BUILD_NUMBER)"' >>$(TMP)
	echo 'BUILD_TAG="$(BUILD_TAG)"' >>$(TMP)
	echo 'COMMIT="$(COMMIT)"' >>$(TMP)
	echo 'DEBIAN_MIRROR="$(DEBIAN_MIRROR)"' >>$(TMP)
	echo 'DIGABI_BUILD_TARGET="$(DIGABI_BUILD_TARGET)"' >>$(TMP)
	echo 'DIGABI_DEBUG="$(DIGABI_DEBUG)"' >>$(TMP)
	echo 'ROOT_PASSWORD="$(ROOT_PASSWORD)"' >>$(TMP)

	$(VAGRANT) ssh -c '$(VM_ENVIRONMENT) ; if [ ! -d $(BUILD_DIR) ] ; then git clone $(GIT_REPOSITORY) $(BUILD_DIR) ; else cd $(BUILD_DIR) ; git checkout $(COMMIT) ; fi'
	$(VAGRANT) ssh -c '$(VM_ENVIRONMENT) ; cd $(BUILD_DIR) && git submodule init && git submodule update'

	$(VAGRANT) ssh -c '$(VM_ENVIRONMENT) ; cat /vagrant/$(shell basename $(TMP)) >> $(BUILD_CONFIG)'

	rm $(TMP)

	$(VAGRANT) ssh -c 'cd $(BUILD_DIR) && lb config'
	mkdir -p $(STAGE)
	touch $(STAGE)/config
	rm -f $(STAGE)/build $(STAGE)/clean

config: $(STAGE)/config

# Provision buildbox
provision: $(STAGE)/environment

# Build new image
$(STAGE)/build: $(STAGE)/config
	$(VAGRANT) ssh -c '$(VM_ENVIRONMENT) ; cd $(BUILD_DIR) && $(BUILD_ENV) sudo lb build ; mv digabi-* /artifacts/'
	mkdir -p $(STAGE)
	touch $(STAGE)/build

$(STAGE)/build-bootstrap: $(STAGE)/config
	$(VAGRANT) ssh -c '$(VM_ENVIRONMENT) ; cd $(BUILD_DIR) && $(BUILD_ENV) sudo lb bootstrap'
	mkdir -p $(STAGE)
	touch $(STAGE)/build-bootstrap

$(STAGE)/build-chroot: $(STAGE)/build-bootstrap
	$(VAGRANT) ssh -c '$(VM_ENVIRONMENT) ; cd $(BUILD_DIR) && $(BUILD_ENV) sudo lb chroot'
	mkdir -p $(STAGE)
	touch $(STAGE)/build-chroot

$(STAGE)/build-binary: $(STAGE)/build-chroot
	$(VAGRANT) ssh -c '$(VM_ENVIRONMENT) ; cd $(BUILD_DIR) && $(BUILD_ENV) sudo lb binary ; mv digabi-* /vagrant/'
	mkdir -p $(STAGE)
	touch $(STAGE)/build-binary
	rm -f $(STAGE)/collect

$(STAGE)/build-kernel: $(STAGE)/environment
	$(VAGRANT) ssh -c '$(VM_ENVIRONMENT) ; sudo apt-get update && apt-get source linux && cd linux-* && debuild-pbuilder -us -uc -j$(DIGABI_BUILD_CPUS) && cd .. && mv *.deb *.dsc *.changes *.xz /artifacts/'
	
build-kernel: $(STAGE)/build-kernel
	mv vagrant/*.deb $(ARTIFACTS_DIR)/

build: $(STAGE)/build

# Collect build artifacts (.ISO) to dist/
$(STAGE)/collect: $(STAGE)/build
	mv vagrant/digabi-os-* $(ARTIFACTS_DIR)/
	touch $(STAGE)/collect

# Build image & collect results
dist:	$(STAGE)/collect

debug: $(STAGE)/environment
	$(VAGRANT) ssh || exit 0
